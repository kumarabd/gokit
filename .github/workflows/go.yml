name: Go

on:
  push:
    branches: [ main, master ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  GO_VERSION: '1.23'

jobs:
  test:
    name: Test
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install dependencies
      run: go mod download

    - name: Run tests
      run: go test -v -race -coverprofile=coverage.txt -covermode=atomic ./...

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.txt
        flags: unittests
        name: codecov-umbrella

  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Install golangci-lint
      uses: golangci/golangci-lint-action@v4
      with:
        version: latest
        args: --timeout=5m --no-config

  fmt:
    name: Format check
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Check formatting
      run: |
        if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
          echo "Code is not formatted. Please run 'go fmt ./...'"
          gofmt -s -d .
          exit 1
        fi

  vet:
    name: Vet
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Run go vet
      run: go vet ./...

  build:
    name: Build
    runs-on: ubuntu-latest
    strategy:
      matrix:
        goos: [linux, darwin, windows]
        goarch: [amd64, arm64]
        exclude:
          - goos: windows
            goarch: arm64
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ env.GO_VERSION }}
        cache: true

    - name: Build
      env:
        GOOS: ${{ matrix.goos }}
        GOARCH: ${{ matrix.goarch }}
      run: |
        cd cli
        go build -v -ldflags "-X main.version=${{ github.ref_name }} -X main.buildTime=$(date -u '+%Y-%m-%d_%H:%M:%S')" -o gokit-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }} .

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: gokit-${{ matrix.goos }}-${{ matrix.goarch }}
        path: cli/gokit-${{ matrix.goos }}-${{ matrix.goarch }}${{ matrix.goos == 'windows' && '.exe' || '' }}



  release:
    name: Release
    needs: [test, lint, fmt, vet, build]
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download all build artifacts
      uses: actions/download-artifact@v4

    - name: Create Release
      uses: softprops/action-gh-release@v1
      with:
        files: |
          gokit-linux-amd64/gokit-linux-amd64
          gokit-darwin-amd64/gokit-darwin-amd64
          gokit-darwin-arm64/gokit-darwin-arm64
          gokit-windows-amd64/gokit-windows-amd64.exe
        name: Release ${{ github.ref_name }}
        tag_name: ${{ github.ref_name }}
        body: |
          ## GoKit CLI ${{ github.ref_name }}
          
          ### Downloads
          - **Linux (AMD64)**: `gokit-linux-amd64`
          - **macOS (Intel)**: `gokit-darwin-amd64`
          - **macOS (Apple Silicon)**: `gokit-darwin-arm64`
          - **Windows (AMD64)**: `gokit-windows-amd64.exe`
          
          ### Installation
          ```bash
          # Download and install
          curl -L https://github.com/${{ github.repository }}/releases/download/${{ github.ref_name }}/gokit-$(uname -s | tr '[:upper:]' '[:lower:]')-$(uname -m) -o /usr/local/bin/gokit
          chmod +x /usr/local/bin/gokit
          ```
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    
