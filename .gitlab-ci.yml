# GitLab CI configuration for GoKit CLI

stages:
  - test
  - build
  - release

variables:
  BINARY_NAME: "gokit"
  GO_VERSION: "1.21"

# Cache Go modules
cache:
  paths:
    - .cache

# Test stage
test:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git make
    - go mod download
  script:
    - make test
    - make lint
  coverage: '/coverage: \d+\.\d+% of statements/'
  artifacts:
    reports:
      coverage_report:
        coverage_format: cobertura
        path: coverage.xml
    paths:
      - coverage.txt
      - coverage.html
    expire_in: 1 week

# Build stage
build:
  stage: build
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git make
    - go mod download
  script:
    - make build-all
  artifacts:
    paths:
      - cli/${BINARY_NAME}-linux-amd64
      - cli/${BINARY_NAME}-darwin-amd64
      - cli/${BINARY_NAME}-darwin-arm64
      - cli/${BINARY_NAME}-windows-amd64.exe
    expire_in: 1 week
  only:
    - tags
    - main

# Release stage - only runs on tags
release:
  stage: release
  image: registry.gitlab.com/gitlab-org/release-cli:latest
  before_script:
    - echo "Preparing release for version $CI_COMMIT_TAG"
  script:
    - |
      release-cli create \
        --name "GoKit CLI v$CI_COMMIT_TAG" \
        --description "GoKit CLI release v$CI_COMMIT_TAG" \
        --tag-name "$CI_COMMIT_TAG" \
        --assets-link "{\"name\":\"${BINARY_NAME}-linux-amd64\",\"url\":\"$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/cli?job=build\"}" \
        --assets-link "{\"name\":\"${BINARY_NAME}-darwin-amd64\",\"url\":\"$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/cli?job=build\"}" \
        --assets-link "{\"name\":\"${BINARY_NAME}-darwin-arm64\",\"url\":\"$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/cli?job=build\"}" \
        --assets-link "{\"name\":\"${BINARY_NAME}-windows-amd64.exe\",\"url\":\"$CI_PROJECT_URL/-/jobs/artifacts/$CI_COMMIT_TAG/browse/cli?job=build\"}"
  only:
    - tags
  when: manual

# Build and publish to GitLab Container Registry (optional)
build-docker:
  stage: build
  image: docker:latest
  services:
    - docker:dind
  before_script:
    - docker login -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD $CI_REGISTRY
  script:
    - docker build -t $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA .
    - docker build -t $CI_REGISTRY_IMAGE:latest .
    - docker push $CI_REGISTRY_IMAGE:$CI_COMMIT_SHA
    - docker push $CI_REGISTRY_IMAGE:latest
  only:
    - main
  when: manual

# Security scanning
security-scan:
  stage: test
  image: golang:${GO_VERSION}-alpine
  before_script:
    - apk add --no-cache git
    - go install github.com/securecodewarrior/gosec/v2/cmd/gosec@latest
  script:
    - gosec ./...
  artifacts:
    reports:
      sast: gl-sast-report.json
    paths:
      - gl-sast-report.json
    expire_in: 1 week
  only:
    - main
    - merge_requests
